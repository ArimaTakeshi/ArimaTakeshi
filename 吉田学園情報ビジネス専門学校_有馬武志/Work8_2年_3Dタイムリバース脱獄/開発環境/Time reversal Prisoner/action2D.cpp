//=============================================================================
//
// アクションポリゴンの処理 [action2D.cpp]
// Author : 有馬武志
//
//=============================================================================
#include "scene.h"
#include "scene2D.h"
#include "action2D.h"
#include "manager.h"
#include "renderer.h"
#include "player.h"
#include "gauge.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define ACTION2D_TEXTURE_NAME_1		"data\\TEXTURE\\sukill.png"			//読み込むテクスチャファイル

//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************

//*****************************************************************************
// グローバル変数:
//*****************************************************************************

//*****************************************************************************
// 静的メンバ変数
//*****************************************************************************
LPDIRECT3DTEXTURE9 CAction2D::m_pTexture[MAX_TEXTURE] = {};

//===============================================================================
//　デフォルトコンストラクタ
//===============================================================================
CAction2D::CAction2D() : CScene2D(4, CScene::OBJTYPE_LOGO)//優先優位イニシャライズ
{
	m_nType = 0;
	m_size = D3DXVECTOR2(0.0f,0.0f);
}
//===============================================================================
//　デストラクタ
//===============================================================================
CAction2D::~CAction2D()
{

}
//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CAction2D::Init(void)
{
	CScene2D::Init();

	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CAction2D::Uninit(void)
{
	CScene2D::Uninit();
}

//=============================================================================
// 更新処理
//=============================================================================
void CAction2D::Update(void)
{
	//入力情報
	CInputKeyBoard *pCInputKeyBoard = CManager::GetInput();

	//位置の割り当て
	D3DXVECTOR3 pos;
	pos = GetPosition();

	//移動量の割り当て
	D3DXVECTOR3 move;
	move = GetMove();

	//位置を更新(移動)
	pos.x += move.x;
	pos.y += move.y;

	//ロゴの位置とサイズ
	CScene2D::SetPosSize(pos, m_size);
	//ロゴの位置とサイズ
	CScene2D::SetMove(move);

	//アクションフェードが起動してない場合
	if (CPlayer::GetActionFade() == false && CGauge::GetGaugeActionFade() == false)
	{
		if (m_size.x < 2500.0f / 2)
		{
			// 指定の高さまで太くする
			m_size.y += 90.0f;
			// 幅を画面幅に
			m_size.x += 100.0f;
		}
		else if (m_size.x <= 2500.0f / 2)
		{
			//2500を超えたら2500を代入する
			m_size.y = 2500.0f;
			m_size.x = 2500.0f;
		}
	}
	//アクションフェードが起動してる場合
	else if (CPlayer::GetActionFade() == true || CGauge::GetGaugeActionFade() == true)
	{
		if (m_size.x > 0)
		{	
			// 指定の高さまで小さくする
			m_size.y -= 90.0f;
			// 幅を画面幅に
			m_size.x -= 100.0f;
		}
		else if (m_size.x >= 0)
		{
			//0を超えたら0を代入する
			m_size.y = 0.0f;
			m_size.x = 0.0f;

			//フェードを消す
			CAction2D::Uninit();

			//アクションフェードのfalseを返す
			CPlayer::SetActionFade(false);

			//ゲージが持つアクションフェードにfalseを返す
			CGauge::SetGaugeActionFade(false);
		}
	}
}
//=============================================================================
// 描画処理
//=============================================================================
void CAction2D::Draw(void)
{
	CScene2D::Draw();
}
//===============================================================================
//　クリエイト
//===============================================================================
CAction2D * CAction2D::Create(D3DXVECTOR3 pos, D3DXVECTOR2 size,int nType)
{
	CAction2D *pAction2D = NULL;

	//NULLチェック
	if (pAction2D == NULL)
	{//メモリの動的確保

		pAction2D = new CAction2D;

		if (pAction2D != NULL)
		{
			//種類を割り当てる
			pAction2D->m_nType = nType;
			//オブジェクトクラスの生成
			pAction2D->Init();
			//テクスチャを割り当てる
			pAction2D->BindTexture(m_pTexture[nType]);
			//位置を割り当てる
			pAction2D->SetPosition(pos);
			//サイズの割り当て
			pAction2D->m_size = size;
		}
	}

	return pAction2D;
}
//===============================================================================
// テクスチャの読み込み
//===============================================================================
HRESULT CAction2D::Load(void)
{
	LPDIRECT3DDEVICE9 pDevice = CManager::GetRenderer()->GetDevice();

	// テクスチャの生成
	D3DXCreateTextureFromFile(pDevice, ACTION2D_TEXTURE_NAME_1,&m_pTexture[0]);

	return S_OK;
}
//===============================================================================
// テクスチャの破棄
//===============================================================================
void CAction2D::UnLoad(void)
{
	for (int nCount = 0; nCount < MAX_TEXTURE; nCount++)
	{
		//テクスチャーの破棄
		if (m_pTexture[nCount] != NULL)
		{
			m_pTexture[nCount]->Release();
			m_pTexture[nCount] = NULL;
		}
	}
}