//=========================================================================================================================
//
// ゲームの処理 [Tutorial.cpp]
// Author : 有馬　武志
//
//=========================================================================================================================

//*************************************************************************************************************************
// インクルードファイル
//*************************************************************************************************************************
#include "main.h"
#include "tutorial.h"		//チュートリアル
#include "player.h"			//プレイヤー
#include "fade.h"			//フェード	
#include "input.h"			//キーボード処理
#include "time.h"			//時間
#include "bg.h"				//背景
#include "block.h"			//ブロック
#include "score.h"			//スコア
#include "item.h"			//アイテム
#include "time.h"			//タイマー
#include "pause.h"			//ポーズ
#include "itemcount.h"		//アイテムカウント
#include "sound.h"			//サウンド
#include "life.h"			//ライフ

//*************************************************************************************************************************
// マクロ定義
//*************************************************************************************************************************

//*************************************************************************************************************************
// グローバル変数
//*************************************************************************************************************************
TUTORIALSTATE g_TutorialState = TUTORIALSTATE_NORMAL;	//ゲーム状態
int g_nCounterTutorialState;							//状態カウンター

//=========================================================================================================================
// 背景初期化処理
//=========================================================================================================================
void InitTutorial(void)
{
	//背景の更新処理
	InitBG();

	//プレイヤー初期化処理
	InitPlayer();

	//ブロックの初期化処理
	InitBlock();

	//スコアの初期化処理
	//InitScore();

	//アイテムカウントの初期化処理
	//InitItemCount();

	//アイテムの初期化処理
	InitItem();

	//ライフの初期化処理
	//InitLife();

	//タイムの初期化処理
	//InitTime();

	//************************************
	// ブロックの配置	
	//************************************
	/*
	for (カウント初期化; カウント回数 < ブロック個数; カウント++)
	{
	SetBlock(D3DXVECTOR3(カウント * ブロックの横幅 , 設置の高さ , 0) タイプ , 高さ , 幅);
	}
	*/
	for (int nCount = 0; nCount < 32; nCount++)
	{//  １段目床
		SetBlock(D3DXVECTOR3(nCount * 40.0f, 680, 0), D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f), 0, 40, 40);
	}
	for (int nCount = 0; nCount < 32; nCount++)
	{//  ２段目床
		SetBlock(D3DXVECTOR3(40 + nCount * 40.0f, 500, 0), D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f), 0, 40, 40);
	}
	for (int nCount = 0; nCount < 20; nCount++)
	{//  ３段目床
		SetBlock(D3DXVECTOR3(240 + nCount * 40.0f, 250, 0), D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f), 0, 40, 40);
	}
	SetBlock(D3DXVECTOR3(1240, 300, 0), D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f), 0, 40, 40);
	//************************************
	// ブロックの配置「説明ブロック」
	//************************************

	////検証用説明ブロック
	SetBlock(D3DXVECTOR3(240, 300, 0), D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f), 17, 200, 800);

	//************************************
	// ブロックの配置「アイテム説明ブロック」
	//************************************

	////検証用説明ブロック
	SetBlock(D3DXVECTOR3(240, 40, 0), D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f), 18, 200, 800);

	//************************************
	// ブロックの配置「操作説明ブロック」
	//************************************

	////検証用説明ブロック
	SetBlock(D3DXVECTOR3(20, 10, 0), D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f), 19, 500, 200);

	//************************************
	// ブロックの配置「アイテム説明ブロック」
	//************************************

	////検証用説明ブロック
	SetBlock(D3DXVECTOR3(1080, 20, 0), D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f), 23, 500, 170);

	//************************************
	// ブロックの配置「横壁」
	//************************************
	for (int nCount = 0; nCount < 2; nCount++)
	{//  横壁
		SetBlock(D3DXVECTOR3(200 + nCount * 840.0f, 0, 0), D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f), 11, 500, 40);
	}
	for (int nCount = 0; nCount < 2; nCount++)
	{//  横壁
		SetBlock(D3DXVECTOR3(nCount * 1240.0f, 0, 0), D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f), 11, 680, 40);
	}

	//************************************
	// アイテム「見本コイン」の配置	
	//************************************

	////検証用見本コイン
	//SetItem(D3DXVECTOR3(30, 30, 0.0f), D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f), 6);

	//************************************
	// アイテム「ドア」の配置	
	//************************************

	SetItem(D3DXVECTOR3(1160, 630, 0.0f), D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f), 8);

}

//=========================================================================================================================
// 背景終了処理
//=========================================================================================================================
void UninitTutorial(void)
{
	//背景の更新処理
	UninitBG();

	//プレイヤーの終了処理
	UninitPlayer();

	//ブロックの終了処理
	UninitBlock();

	//スコアの終了処理
	//UninitScore();

	//アイテムカウントの終了処理
	//UninitItemCount();

	//アイテムの終了処理
	UninitItem();

	//ライフの終了処理
	//UninitLife();

	//タイムの終了処理
	//();

}
//=========================================================================================================================
// 背景更新処理
//=========================================================================================================================
void UpdateTutorial(void)
{

	//背景の更新処理
	UpdateBG();

	//プレイヤーの更新処理
	UpdatePlayer();

	//ブロックの更新処理
	UpdateBlock();

	//スコアの更新処理
	//UpdateScore();

	//アイテムカウントの更新処理
	//UpdateItemCount();

	//ライフの更新処理
	//UpdateLife();

	//アイテムの更新処理
	UpdateItem();

	//タイムの更新処理
	//UpdateTime();

}

//=========================================================================================================================
// 背景描画処理
//=========================================================================================================================
void DrawTutorial(void)
{
	//背景の描画処理
	DrawBG();

	//ブロックの描画処理
	DrawBlock();

	//スコアの描画処理
	//DrawScore();

	//アイテムカウントの描画処理
	//DrawItemCount();

	//アイテムの描画処理
	DrawItem();

	//プレイヤーの描画
	DrawPlayer();

	//ライフの描画処理
	//DrawLife();

	//タイムの描画処理
	//DrawTime();
}
//=========================================================================================================================
// ゲーム状態の設定
//=========================================================================================================================
void SetTutorialState(TUTORIALSTATE state)
{
	g_TutorialState = state;
	g_nCounterTutorialState = 0;
}
//=========================================================================================================================
// ゲーム状態の取得
//=========================================================================================================================
TUTORIALSTATE GetTutorialState(void)
{
	return g_TutorialState;
}

