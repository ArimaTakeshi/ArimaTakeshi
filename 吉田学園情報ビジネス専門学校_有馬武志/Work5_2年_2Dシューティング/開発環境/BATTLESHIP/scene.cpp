//=============================================================================
//
// レンダラー処理 [scene.cpp]
// Author : 有馬武志
//
//=============================================================================
#include "scene.h"
#include "scene2D.h"
#include "renderer.h"
#include "pause.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************

//*****************************************************************************
// グローバル変数:
//*****************************************************************************

////-------------------------------------------------------------------------------
////	                    〜静的メンバ変数宣言〜
////-------------------------------------------------------------------------------
//--- 初期値を必ず入れる ---//
CScene * CScene::m_apScene[NUM_PRIORITY][MAX_DATA] = {};
int CScene::m_nNumAll = 0;
int CScene::m_nUpdatePri = 0;

//===============================================================================
//　デフォルトコンストラクタ
//===============================================================================
CScene::CScene(int nPriority)
{
	for (int nCount = 0; nCount < MAX_DATA; nCount++)
	{
		if (m_apScene[nPriority][nCount] == NULL)
		{//代入
		 //この瞬間CScene2Dがはいる
			m_apScene[nPriority][nCount] = this;

			//順位を入れる
			m_nPriority = nPriority;

			//IDの値の保持
			m_nID = nCount;

			//オブジェクトタイプをNONEにする
			m_ObjType = OBJTYPE_NONE;

			//総数をカウントアップ
			m_nNumAll++;

			break;
		}
	}
}
//===============================================================================
//　デストラクタ
//===============================================================================
CScene::~CScene()
{

}
//===============================================================================
//	全てのクリーン
//===============================================================================
void CScene::ReleseAll(void)
{
	for (int nCntPri = 0; nCntPri < NUM_PRIORITY; nCntPri++)
	{
		for (int nCount = 0; nCount < MAX_DATA; nCount++)
		{
			//Scene NULLチェック
			if (m_apScene[nCntPri][nCount] != NULL)
			{
				//終了処理
				m_apScene[nCntPri][nCount]->Uninit();
			}
		}
	}
}
//===============================================================================
//	全てのアップデート
//===============================================================================
void CScene::UpdateAll(void)
{
	for (int nCntPri = m_nUpdatePri; nCntPri < NUM_PRIORITY; nCntPri++)
	{
		for (int nCount = 0; nCount < MAX_DATA; nCount++)
		{
			if (m_apScene[nCntPri][nCount] != NULL)
			{
				// ポリゴンの更新処理
				m_apScene[nCntPri][nCount]->Update();
			}
		}
	}
}
//===============================================================================
//	全ての描画
//===============================================================================
void CScene::DrawAll(void)
{
	for (int nCntPri = 0; nCntPri < NUM_PRIORITY; nCntPri++)
	{
		for (int nCount = 0; nCount < MAX_DATA; nCount++)
		{
			if (m_apScene[nCntPri][nCount] != NULL)
			{
				// ポリゴンの描画処理
				m_apScene[nCntPri][nCount]->Draw();
			}
		}
	}
}
//===============================================================================
//	単体の削除
//===============================================================================
void CScene::Release(void)
{
	//Scene NULLチェック
	if (m_apScene[m_nPriority][m_nID] != NULL)
	{
		int nID = m_nID;
		int nPriority = m_nPriority;

		//メモリの解放
		delete m_apScene[nPriority][nID];

		m_apScene[nPriority][nID] = NULL;

		m_nNumAll--;
	}
}
//===============================================================================
// 
//===============================================================================
void CScene::SetObjType(OBJTYPE ObjType)
{
	m_ObjType = ObjType;
}
//===============================================================================
// 
//===============================================================================
CScene::OBJTYPE CScene::GetObjType(void)
{
	return m_ObjType;
}
//===============================================================================
// 
//===============================================================================
CScene * CScene::GetScene(int nPriNumber, int nIdx)
{
	return m_apScene[nPriNumber][nIdx];
}
//===============================================================================
//
//===============================================================================
void CScene::SetUpdatePri(int nUpdatePri)
{
	m_nUpdatePri = nUpdatePri;
}

