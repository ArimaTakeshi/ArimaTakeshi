//=============================================================================
//
// 衣服処理 [clothing.cpp]
// Author : Ryo Sugimoto
//
//=============================================================================
#include "main.h"
#include "wind.h"
#include "renderer.h"
#include "manager.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************

//*****************************************************************************
// 静的メンバ変数
//*****************************************************************************

//==================================================================================================//
//    * 風の初期化処理 *
//==================================================================================================//
void CWind::Init(void)
{
	m_fPower = 0.0f;
	m_fMaxPower = ((rand() % 100 + 1) * 0.01f) * WIND_POW + WIND_PLUS;
	m_fRange = ((rand() % 100 + 1) * 0.01f) * WIND_RANGE;
	m_fGoal = ((rand() % 100 + 1) * 0.01f) * WIND_GOAL;
	m_fBack = ((rand() % 100 + 1) * 0.01f) * WIND_BACK;
	m_fRot = ((rand() % 100) * 0.01f) * D3DX_PI * 2.0f;
	m_bState = false;
}
//==================================================================================================//
//    * 風の初期化処理 *
//==================================================================================================//
void CWind::Update(void)
{
	//m_fRot += D3DX_PI * 0.02f;
	if (m_fRot > D3DX_PI) { m_fRot -= D3DX_PI * 2.0f; }
	else if (m_fRot < D3DX_PI) { m_fRot += D3DX_PI * 2.0f; }

	if (!m_bState)
	{//風が上がりきってない
		m_fPower += (m_fMaxPower - m_fPower) * m_fGoal;
		if (m_fPower == m_fMaxPower) { Init(); }
	}
	else
	{//既に風が上がりきった
		m_fPower += (0.0f - m_fPower) * m_fBack;
		if (m_fPower == 0.0f) { m_bState = true; }
	}

}
//==================================================================================================//
//    * 風の初期化処理 *
//==================================================================================================//
void CWind::Uninit(void)
{
}
//==================================================================================================//
//    * 風の初期化処理 *
//==================================================================================================//
void CWind_Manager::Init(void)
{
	if (m_pWind != NULL)
	{//風が生成されている場合削除
		delete[] m_pWind;
	}

	//新しく風邪を生成
	m_nMaxWind = MAX_WIND;
	m_pWind = new CWind[m_nMaxWind];

	if (m_pWind != NULL)
	{//風の初期化
		for (int nCount = 0; nCount < m_nMaxWind; nCount++)
		{
			m_pWind[nCount].Init();
		}
	}

	m_fCntState = 0.0f;
	m_fRotPlus = 0.0f;
	m_fRot = ((rand() % 100) * 0.01f) * (D3DX_PI * 2.0f);	//360度

	if		(m_fRot > D3DX_PI) { m_fRot -= D3DX_PI * 2.0f; }
	else if (m_fRot < D3DX_PI) { m_fRot += D3DX_PI * 2.0f; }

	CManager::GetWind() = this;
}
//==================================================================================================//
//    * 風の初期化処理 *
//==================================================================================================//
void CWind_Manager::Update(void)
{
	m_fRot += D3DX_PI * 0.005f;	//360度
	if (m_fRot > D3DX_PI) { m_fRot -= D3DX_PI * 2.0f; }
	else if (m_fRot < D3DX_PI) { m_fRot += D3DX_PI * 2.0f; }

	if (m_pWind != NULL)
	{

		//m_fCntState += 1.0f;
		//if		(m_fRot > D3DX_PI) { m_fRot -= D3DX_PI * 2.0f; }
		//else if (m_fRot < D3DX_PI) { m_fRot += D3DX_PI * 2.0f; }

		for (int nCount = 0; nCount < m_nMaxWind; nCount++)
		{
			m_pWind[nCount].Update();
		}
	}
}
//==================================================================================================//
//    * 風の初期化処理 *
//==================================================================================================//
void CWind_Manager::Uninit(void)
{
	CManager::GetWind() = NULL;
	if (m_pWind != NULL)
	{
		m_nMaxWind = 0;
		delete[] m_pWind;
	}
}
