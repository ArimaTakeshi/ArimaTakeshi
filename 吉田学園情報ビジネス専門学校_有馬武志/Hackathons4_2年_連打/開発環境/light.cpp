//=============================================================================
//
// ライト処理 [light.cpp]
// Author : Ryo Sugimoto
//
//=============================================================================
#include "light.h"
#include "renderer.h"
#include "manager.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************


//*****************************************************************************
// グローバル変数
//*****************************************************************************


//=============================================================================
// コンストラクタ
//=============================================================================
CLight::CLight()
{//中身クリア

}
//=============================================================================
// コンストラクタ
//=============================================================================
CLight::~CLight()
{//中身クリア

}
//=============================================================================
// ライトの初期化処理
//=============================================================================
void CLight::InitLight(void)
{
	LPDIRECT3DDEVICE9	pDevice = CManager::GetRenderer()->GetDevice();	// デバイスの取得
	D3DXVECTOR3			vecDir;
	int					nCntLight;

	for (nCntLight = 0; nCntLight < 3; nCntLight++)
	{
		// ライトをクリアする
		ZeroMemory(&m_light[nCntLight], sizeof(D3DLIGHT9));

		// ライトの種類を設定
		m_light[nCntLight].Type = D3DLIGHT_DIRECTIONAL;

		// ライトの拡散光を設定
		m_light[nCntLight].Diffuse = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);

		// ライトの方向の設定
		if (nCntLight == 0) { vecDir = D3DXVECTOR3(0.2f, -0.8f, -0.4f); }
		if (nCntLight == 1) { vecDir = D3DXVECTOR3(-0.5f, -0.2f, 0.4f); }	
		if (nCntLight == 2) { vecDir = D3DXVECTOR3(0.4f, -0.8f, 1.0f); }

		D3DXVec3Normalize(&vecDir, &vecDir);				//正規化にする
		m_light[nCntLight].Direction = vecDir;

		// ライトを設定する
		pDevice->SetLight(nCntLight, &m_light[nCntLight]);

		// ライトを有効にする
		pDevice->LightEnable(nCntLight, TRUE);
	}

}

//=============================================================================
// ライトの終了処理
//=============================================================================
void CLight::UninitLight(void)
{
}

//=============================================================================
// ライトの更新処理
//=============================================================================
void CLight::UpdateLight(void)
{
}

